// Code generated by protoc-gen-go.
// source: models/iclick_adx_rtb_v3.proto
// DO NOT EDIT!

/*
Package models is a generated protocol buffer package.

option java_generate_equals_and_hash = true;
option java_generic_services = true;
option java_multiple_files = true;

It is generated from these files:
	models/iclick_adx_rtb_v3.proto

It has these top-level messages:
	BidRequest
	BidResponse
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BidRequest struct {
	// 请求ID，唯一标识本次请求，明文字符串
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 默认每次请求一个广告位
	// Always   yes
	Imp []*BidRequest_Impression `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	// 网站信息
	// Always   Yes, if this impression is a banner ad opportunity.
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site" json:"site,omitempty"`
	// App Object. Only application for apps.
	// Always   Yes, if this impression is a video ad opportunity.
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
	// Always   yes
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// 用户信息
	// Always   yes
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// Indicator of test mode in which auctions are not billable, where 0 = live mode, 1 = test mode, default 0.
	// Always   no
	Test int32 `protobuf:"varint,7,opt,name=test" json:"test,omitempty"`
	// 最大竞价时间，单位milliseconds   Maximum time in milliseconds to submit a bid to avoid timeout, default 100.
	// Always   no
	Tmax int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	// 竞价货币类型, 默认为人民币(CNY)   Array of allowed currencies for bids on this bid request using ISO-4217 alpha codes.
	// Always   no
	Cur []string `protobuf:"bytes,9,rep,name=cur" json:"cur,omitempty"`
}

func (m *BidRequest) Reset()         { *m = BidRequest{} }
func (m *BidRequest) String() string { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()    {}

func (m *BidRequest) GetImp() []*BidRequest_Impression {
	if m != nil {
		return m.Imp
	}
	return nil
}

func (m *BidRequest) GetSite() *BidRequest_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *BidRequest_App {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *BidRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetUser() *BidRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

// **** 曝光信息 ****
type BidRequest_Impression struct {
	// 曝光id
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 版位信息
	// Always   Yes, if this impression is a banner ad opportunity.
	Banner *BidRequest_Impression_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	// video object
	// Always   Yes,  if this impression is a video ad opportunity.
	Video *BidRequest_Impression_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible for rendering ad (typically video or mobile).
	// Always   no
	Displaymanager string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	// Version of the display manager.
	// Always   no
	Displaymanagerver string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	// 版位底价，单位：千次展示/元
	// Always   no
	Bidfloor float32 `protobuf:"fixed32,6,opt,name=bidfloor" json:"bidfloor,omitempty"`
	// 版位货币单位，默认为CNY(人民币) Currency specified using ISO-4217 alpha codes.
	// Always   no
	Bidfloorcur string `protobuf:"bytes,7,opt,name=bidfloorcur" json:"bidfloorcur,omitempty"`
}

func (m *BidRequest_Impression) Reset()         { *m = BidRequest_Impression{} }
func (m *BidRequest_Impression) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression) ProtoMessage()    {}

func (m *BidRequest_Impression) GetBanner() *BidRequest_Impression_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *BidRequest_Impression) GetVideo() *BidRequest_Impression_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

// **** 版位信息 ****
type BidRequest_Impression_Banner struct {
	// 宽
	// Always   yes
	W int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// 高
	// Always   yes
	H int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Blocked banner ad types. Refer to OpenRTB 2.3.1 Section 5.2.
	// Always   no
	Btype []int32 `protobuf:"varint,3,rep,name=btype" json:"btype,omitempty"`
	// Ad position on screen. Refer to OpenRTB 2.3.1 Section 5.4.
	// Always   no
	Pos int32 `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
	// Content MIME types supported.
	// Always   no
	Mimes []int32 `protobuf:"varint,5,rep,name=mimes" json:"mimes,omitempty"`
	// Ext
	Ext *BidRequest_Impression_Banner_Ext `protobuf:"bytes,6,opt,name=ext" json:"ext,omitempty"`
}

func (m *BidRequest_Impression_Banner) Reset()         { *m = BidRequest_Impression_Banner{} }
func (m *BidRequest_Impression_Banner) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner) ProtoMessage()    {}

func (m *BidRequest_Impression_Banner) GetExt() *BidRequest_Impression_Banner_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

type BidRequest_Impression_Banner_Ext struct {
	// postion floating .
	// 1     Floating Left
	// 2     Floating Right
	// 3     Floating Top
	// 4     Floating Bottom
	// 5     Floating Top Left
	// 6     Floating Top Right
	// 7     Floating Bottom Left
	// 8     Floating Bottom Right
	// Always   no
	Pos int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
}

func (m *BidRequest_Impression_Banner_Ext) Reset()         { *m = BidRequest_Impression_Banner_Ext{} }
func (m *BidRequest_Impression_Banner_Ext) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner_Ext) ProtoMessage()    {}

// ***** Video Object. *****
type BidRequest_Impression_Video struct {
	// Content MIME types supported.
	// Always   yes
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Minimum video ad duration in seconds.
	// Always   yes
	Minduration int32 `protobuf:"varint,2,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// Always   yes
	Maxduration int32 `protobuf:"varint,3,opt,name=maxduration" json:"maxduration,omitempty"`
	// Array of supported video bid response protocols. Refer to OpenRTB 2.3.1 Section 5.8.
	// Always   yes
	Protocols []int32 `protobuf:"varint,4,rep,name=protocols" json:"protocols,omitempty"`
	// Width of the video player in pixels.
	// Always   yes
	W int32 `protobuf:"varint,5,opt,name=w" json:"w,omitempty"`
	// Height of the video player in pixels.
	// Always   yes
	H int32 `protobuf:"varint,6,opt,name=h" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll ad placements. OpenRTB 2.3.1 Section 5.10.
	// Always   no
	Startdelay int32 `protobuf:"varint,7,opt,name=startdelay" json:"startdelay,omitempty"`
	// Ad position on screen. Refer to OpenRTB 2.3.1 Section 5.4.
	// Always   no
	Pos int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
}

func (m *BidRequest_Impression_Video) Reset()         { *m = BidRequest_Impression_Video{} }
func (m *BidRequest_Impression_Video) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Video) ProtoMessage()    {}

// ****  Publisher 媒体相关信息
type BidRequest_Publisher struct {
	// Unique ID of this publisher.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *BidRequest_Publisher) Reset()         { *m = BidRequest_Publisher{} }
func (m *BidRequest_Publisher) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Publisher) ProtoMessage()    {}

// **** 网站信息 ****
type BidRequest_Site struct {
	// 网站id
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 页面url
	// Always   no
	Page string `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	// publisher
	// Always   yes
	Publisher *BidRequest_Publisher `protobuf:"bytes,3,opt,name=publisher" json:"publisher,omitempty"`
}

func (m *BidRequest_Site) Reset()         { *m = BidRequest_Site{} }
func (m *BidRequest_Site) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Site) ProtoMessage()    {}

func (m *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

// APP
type BidRequest_App struct {
	// Unique ID of this app.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// App name (may be aliased at the publisher’s request).
	// Always   no
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Application bundle or package name (e.g., com.foo.mygame).
	// Always   no
	Bundle string `protobuf:"bytes,3,opt,name=bundle" json:"bundle,omitempty"`
	// Domain of the app (e.g., “mygame.foo.com”).
	// Always   no
	Domain string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	// Publisher Object.
	// Always   yes
	Publisher *BidRequest_Publisher `protobuf:"bytes,5,opt,name=publisher" json:"publisher,omitempty"`
}

func (m *BidRequest_App) Reset()         { *m = BidRequest_App{} }
func (m *BidRequest_App) String() string { return proto.CompactTextString(m) }
func (*BidRequest_App) ProtoMessage()    {}

func (m *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

// **** 设备信息 ****
type BidRequest_Device struct {
	// User-Agent Browser user agent string.
	// Always   no
	Ua string `protobuf:"bytes,1,opt,name=ua" json:"ua,omitempty"`
	// 用户IP地址，点分十进制字符串 IPv4 address closest to device.
	// Always   no
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// Not hashed ID
	// Always   no
	Ifa string `protobuf:"bytes,3,opt,name=ifa" json:"ifa,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	// Always   no
	Didsha1 string `protobuf:"bytes,4,opt,name=didsha1" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	// Always   no
	Didmd5 string `protobuf:"bytes,5,opt,name=didmd5" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	// Always   no
	Dpidsha1 string `protobuf:"bytes,6,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	// Always   no
	Dpidmd5 string `protobuf:"bytes,7,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	// MAC address of the device; hashed via SHA1.
	// Always   no
	Macsha1 string `protobuf:"bytes,8,opt,name=macsha1" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5.
	// Always   no
	Macmd5 string `protobuf:"bytes,9,opt,name=macmd5" json:"macmd5,omitempty"`
}

func (m *BidRequest_Device) Reset()         { *m = BidRequest_Device{} }
func (m *BidRequest_Device) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Device) ProtoMessage()    {}

// **** 用户信息 ****
type BidRequest_User struct {
	// 用户ID Unique ID of this user on the exchange.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by iClick for the buyer
	// Always   no
	Buyeruid string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
}

func (m *BidRequest_User) Reset()         { *m = BidRequest_User{} }
func (m *BidRequest_User) String() string { return proto.CompactTextString(m) }
func (*BidRequest_User) ProtoMessage()    {}

type BidResponse struct {
	// 返回ID，请将请求中的id赋值给返回id。 ID of the bid request to which this is a response.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 返回的广告信息
	// Always   yes
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	// Always   no
	Bidid string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	// Bid currency using ISO-4217 alpha codes. default CNY
	// Always   no
	Cur string `protobuf:"bytes,4,opt,name=cur" json:"cur,omitempty"`
}

func (m *BidResponse) Reset()         { *m = BidResponse{} }
func (m *BidResponse) String() string { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()    {}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

// **** seatbid ****
type BidResponse_SeatBid struct {
	// 返回的竞价广告
	// Always   yes
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	// ID of the bidder seat on whose behalf this bid is made。竟价的 seat. 如 代表多个dsp出价...
	// Always   no
	Seat string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
}

func (m *BidResponse_SeatBid) Reset()         { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()    {}

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

// **** 竞价广告信息 ****
type BidResponse_SeatBid_Bid struct {
	// Bidder generated bid ID to assist with logging/tracking.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 竞价的曝光id,ID of the Impression Object in the related bid request.
	// Always   yes
	Impid string `protobuf:"bytes,2,opt,name=impid" json:"impid,omitempty"`
	// 竞价，cpm 单位：千次展示/元
	// Always   yes
	Price float32 `protobuf:"fixed32,3,opt,name=price" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins. 比如预审广告，投放时只返回该Adid
	// Always   no
	Adid string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	// winner通知url
	// Always   no
	Nurl string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	// Ad markup in case the bid wins.
	// Always   yes
	Adm string `protobuf:"bytes,6,opt,name=adm" json:"adm,omitempty"`
	// 广告主 domain。 Advertiser domain for block list checking and ad quality/safety checking (e.g., 'ford.com'). Only one domain is allowed.
	// Always   yes
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// 广告纯内容的url。 URL without cache-busting to an image that is representative of the content of the campaign for ad quality/safety checking.
	// Always   yes
	Iurl string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	// campaign id
	// Always   no
	Cid string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	// creative id
	// Always   yes
	Crid string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// 物料尺寸 - 高度。需与请求中的尺寸一致
	// Always   yes
	H int32 `protobuf:"varint,11,opt,name=h" json:"h,omitempty"`
	// 物料尺寸 - 宽度。需与请求中的尺寸一致
	// Always   yes
	W int32 `protobuf:"varint,12,opt,name=w" json:"w,omitempty"`
	// IAB content categories of the creative as defined in OpenRTB.  Refer to List 5.1
	// Always   no
	Cat []string `protobuf:"bytes,13,rep,name=cat" json:"cat,omitempty"`
}

func (m *BidResponse_SeatBid_Bid) Reset()         { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()    {}
